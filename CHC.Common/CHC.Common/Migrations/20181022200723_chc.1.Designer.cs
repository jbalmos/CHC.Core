// <auto-generated />
using System;
using CHC.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CHC.Common.Migrations
{
    [DbContext(typeof(ChcDbContext))]
    [Migration("20181022200723_chc.1")]
    partial class chc1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CHC.Entites.Customers.ContactRequest", b =>
                {
                    b.Property<int>("ContactRequestID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerID");

                    b.Property<string>("Message");

                    b.Property<DateTime>("RequestDtm");

                    b.Property<string>("Subject");

                    b.HasKey("ContactRequestID");

                    b.ToTable("tblContactRequest");
                });

            modelBuilder.Entity("CHC.Entities.Customers.Account", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AccountID");

                    b.Property<DateTime>("CreatedDtm");

                    b.Property<int?>("CustomerID");

                    b.Property<string>("LastIPAddress");

                    b.Property<DateTime?>("LastLoginDtm");

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.Property<int>("Type");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.ToTable("tblAccount");
                });

            modelBuilder.Entity("CHC.Entities.Customers.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustomerAddressID");

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("City");

                    b.Property<int>("CustomerID");

                    b.Property<string>("Phone");

                    b.Property<string>("State");

                    b.Property<string>("Zip");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.ToTable("tblCustomerAddress");
                });

            modelBuilder.Entity("CHC.Entities.Customers.Customer", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsEmergencyPersonnel");

                    b.Property<bool>("IsFuelAssistanceCustomer");

                    b.Property<bool>("IsSeniorCitizen");

                    b.Property<bool>("IsUSMilitaryCustomer");

                    b.Property<string>("LastName");

                    b.Property<string>("Mobile");

                    b.HasKey("ID");

                    b.ToTable("tblCustomer");
                });

            modelBuilder.Entity("CHC.Entities.Customers.FillPipeLocation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FillPipeLocationID");

                    b.Property<string>("Description");

                    b.HasKey("ID");

                    b.ToTable("tblFillPipeLocation");
                });

            modelBuilder.Entity("CHC.Entities.Customers.OilTank", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustomerOilTankID");

                    b.Property<int>("AddressID")
                        .HasColumnName("CustomerAddressID");

                    b.Property<string>("FillPipeLocation");

                    b.Property<bool>("IsIndoor");

                    b.Property<int>("Size");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.ToTable("tblCustomerOilTank");
                });

            modelBuilder.Entity("CHC.Entities.Services.OilDelivery.DeliveryRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OilDeliveryRequestID");

                    b.Property<int>("CustomerAddressID");

                    b.Property<DateTime>("DateRequested");

                    b.Property<int>("EstimatedGallons");

                    b.Property<decimal>("PricePerGallon");

                    b.Property<bool>("RequiresBurnerPriming");

                    b.Property<bool>("isFillUp");

                    b.HasKey("ID");

                    b.HasIndex("CustomerAddressID");

                    b.ToTable("tblOilDeliveryRequest");
                });

            modelBuilder.Entity("CHC.Entities.Services.OilDelivery.DeliveryRequestFee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OilDeliveryRequestFeeID");

                    b.Property<int>("DeliveryRequestID")
                        .HasColumnName("OilDeliveryRequestID");

                    b.Property<string>("Description");

                    b.Property<decimal>("Fee");

                    b.HasKey("ID");

                    b.HasIndex("DeliveryRequestID");

                    b.ToTable("tblOilDeliveryRequestFee");
                });

            modelBuilder.Entity("CHC.Entities.Services.OilDelivery.PriceLevel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OilDeliveryPriceLevelID");

                    b.Property<int>("GallonRangeEnd");

                    b.Property<int>("GallonRangeStart");

                    b.Property<int?>("OilDeliveryPricingTierID");

                    b.Property<decimal>("PricePerGallon");

                    b.HasKey("ID");

                    b.HasIndex("OilDeliveryPricingTierID");

                    b.ToTable("tblOilDeliveryPriceLevel");
                });

            modelBuilder.Entity("CHC.Entities.Services.OilDelivery.PriceLevelFee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OilDeliveryPriceLevelFeeID");

                    b.Property<string>("Description");

                    b.Property<decimal>("Fee");

                    b.Property<int>("OilDeliveryPriceLevelID");

                    b.HasKey("ID");

                    b.HasIndex("OilDeliveryPriceLevelID");

                    b.ToTable("tblOilDeliveryPriceLevelFee");
                });

            modelBuilder.Entity("CHC.Entities.Services.OilDelivery.PricingTier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OilDeliveryPricingTierID");

                    b.Property<decimal>("BurnerPrimingFee");

                    b.Property<decimal>("CreditCardSurcharge");

                    b.Property<string>("Description");

                    b.HasKey("ID");

                    b.ToTable("tblOilDeliveryPricingTier");
                });

            modelBuilder.Entity("CHC.Entities.Services.OilDelivery.ServiceArea", b =>
                {
                    b.Property<int>("OilDeliveryPricingTierID");

                    b.Property<string>("Zip");

                    b.HasKey("OilDeliveryPricingTierID", "Zip");

                    b.HasIndex("Zip");

                    b.ToTable("tblOilDeliveryServiceArea");
                });

            modelBuilder.Entity("CHC.Entities.Services.OilDelivery.ServiceAreaTown", b =>
                {
                    b.Property<string>("Zip")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Zip");

                    b.ToTable("tblServiceAreaTown");
                });

            modelBuilder.Entity("CHC.Entities.Customers.Account", b =>
                {
                    b.HasOne("CHC.Entities.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID");
                });

            modelBuilder.Entity("CHC.Entities.Customers.Address", b =>
                {
                    b.HasOne("CHC.Entities.Customers.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CHC.Entities.Customers.Customer", b =>
                {
                    b.HasOne("CHC.Entities.Customers.Account", "Account")
                        .WithOne()
                        .HasForeignKey("CHC.Entities.Customers.Customer", "ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CHC.Entities.Customers.OilTank", b =>
                {
                    b.HasOne("CHC.Entities.Customers.Address", "Address")
                        .WithMany("OilTanks")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CHC.Entities.Services.OilDelivery.DeliveryRequest", b =>
                {
                    b.HasOne("CHC.Entities.Customers.Address", "CustomerAddress")
                        .WithMany("DeliveryRequests")
                        .HasForeignKey("CustomerAddressID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CHC.Entities.Services.OilDelivery.DeliveryRequestFee", b =>
                {
                    b.HasOne("CHC.Entities.Services.OilDelivery.DeliveryRequest", "DeliveryRequest")
                        .WithMany("DeliveryRequestFees")
                        .HasForeignKey("DeliveryRequestID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CHC.Entities.Services.OilDelivery.PriceLevel", b =>
                {
                    b.HasOne("CHC.Entities.Services.OilDelivery.PricingTier", "PricingTier")
                        .WithMany("PriceLevels")
                        .HasForeignKey("OilDeliveryPricingTierID");
                });

            modelBuilder.Entity("CHC.Entities.Services.OilDelivery.PriceLevelFee", b =>
                {
                    b.HasOne("CHC.Entities.Services.OilDelivery.PriceLevel", "PriceLevel")
                        .WithMany("Fees")
                        .HasForeignKey("OilDeliveryPriceLevelID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CHC.Entities.Services.OilDelivery.ServiceArea", b =>
                {
                    b.HasOne("CHC.Entities.Services.OilDelivery.PricingTier", "PricingTier")
                        .WithMany("ServiceAreas")
                        .HasForeignKey("OilDeliveryPricingTierID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CHC.Entities.Services.OilDelivery.ServiceAreaTown", "Town")
                        .WithMany("ServiceAreas")
                        .HasForeignKey("Zip")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
